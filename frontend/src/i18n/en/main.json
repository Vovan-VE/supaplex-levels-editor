{
  "about": {
    "content": {
      "B010": "<b>{APP_TITLE}</b> is <b>Supaplex Levels Editor</b>. Inspired by <linkSo>Supaplex.Online</linkSo> and its community."
    }
  },
  "app": {
    "DesktopName": "Desktop {APP_TITLE}"
  },
  "cmpLevels": {
    "Calculating": "Calculating...",
    "DialogTitle": "Compare levels",
    "IgnoreFancy": "Ignore Fancy",
    "prop": {
      "Driver": "Driver",
      "Height": "Height",
      "Title": "Title",
      "Width": "Width"
    },
    "Property": "Property",
    "Reverse": "Reverse",
    "shape": {
      "Diagonal": "Diagonal",
      "Fade": "Fade",
      "Horizontal": "Horizontal",
      "Vertical": "Vertical"
    },
    "Shape": "Shape"
  },
  "common": {
    "buttons": {
      "Cancel": "Cancel",
      "Close": "Close",
      "Create": "Create",
      "GitHubRepo": "GitHub repo",
      "Help": "Help",
      "Info": "Info",
      "OK": "OK",
      "Settings": "Settings",
      "ZoomIn": "Zoom In",
      "ZoomOut": "Zoom Out"
    },
    "labels": {
      "Filter": "Filter",
      "HotkeyCycledMarker": "[cycled]",
      "Loading": "Loading..."
    },
    "toasts": {
      "Copied": "Copied"
    }
  },
  "demoEdit": {
    "DemoText": "Demo text representation",
    "DialogTitle": "Edit demo",
    "Signature": "Signature"
  },
  "edit": {
    "Copy": "Copy selection",
    "Cut": "Cut selection",
    "Delete": "Delete selection",
    "EditDemoAndSignature": "Edit demo, signature",
    "Paste": "Paste selection {size}",
    "PlayerPosAt": "At {pos}",
    "Redo": "Redo",
    "Undo": "Undo"
  },
  "files": {
    "buttons": {
      "ConvertFormat": "Convert format...",
      "New": "Create new levelset...",
      "Open": "Open files...",
      "SaveZipWithOptions": "Save file ZIP with Options"
    },
    "convert": {
      "DialogTitle": "Convert file format",
      "FileFormat": "File type",
      "HintNewFileWill": "A new levelset will be created, so it's nothing to loose.",
      "LevelIndex": "<b>level {index}</b>:",
      "SummaryErrors": "Conversion impossible due to the following errors:",
      "SummaryWarnings": "Conversion will cause the following changes:"
    },
    "messages": {
      "CannotCreateNew": "Cannot create levelset: {reason}",
      "CannotFlushToStorage": "Could not flush data to storage",
      "CannotReadFile": "\"{file}\": Cannot read file: {reason}.",
      "FailedFlushToStorage": "Failed to flush data to storage:",
      "FlushingToStorage": "Flushing data to storage...",
      "UnsupportedFormat": "\"{file}\": Unsupported file format."
    },
    "new": {
      "Border": "Border",
      "DefaultFileExt": "Default extension <code>{ext}</code> will be appended.",
      "DialogTitle": "New file",
      "Driver": "Driver",
      "FileFormat": "File type",
      "FileName": "File name",
      "FillBody": "Fill body",
      "InvalidFileExt": "Invalid file extension.",
      "LevelHeight": "Levels Height",
      "LevelsCount": "Levels count",
      "LevelTitle": "Title for every level",
      "LevelWidth": "Levels Width"
    },
    "notActivated": {
      "OpenCompact": "Open or Create a file in <filesMenu>Files menu</filesMenu>.",
      "OpenFull": "Open or Create a file in Files Tabs.",
      "SelectCompact": "Select a file in <filesMenu>Files menu</filesMenu>.",
      "SelectFull": "Select a file in Files Tabs."
    }
  },
  "level": {
    "buttons": {
      "Resize": "Resize"
    },
    "config": {
      "DialogTitle": "Level settings"
    },
    "export": {
      "CopyLevelAsDemoLink": "Copy level as Demo Link",
      "CopyLevelAsDemoLinkNone": "Copy level as Demo Link (no demo)",
      "CopyLevelAsTestUrl": "Copy level as Test Link",
      "CopySelectionAsImage": "Copy level/selection as Image",
      "SaveLevelAsFile": "Save level as File",
      "SaveSelectionAsImage": "Save level/selection as Image"
    },
    "manage": {
      "Append": "Append new level {number}",
      "CannotLessThenMin": "Cannot remove level because it's already minimum {min}",
      "CloseOtherTabs": "Close other levels tabs",
      "CloseTab": "Close level tab ({level})",
      "Delete": "Delete level {level}",
      "DeleteRestLevels": "Delete rest {n} levels",
      "ExportLevel": "Export level",
      "ImportLevelFromFileReplace": "Import a level from file into current level",
      "Insert": "Insert a new level at {number} and move the current forward"
    },
    "resize": {
      "DialogTitle": "Resize level",
      "labels": {
        "Border": "Border",
        "CurrentSize": "Current size:",
        "FillBody": "Fill body",
        "FillNewEmptySpace": "When it is necessary to fill new empty space:",
        "NewHeight": "New Height",
        "NewWidth": "New Width"
      },
      "NoticeLargeSizeLags": "<b>NOTICE:</b> Large level may cause some lags while editing.",
      "ResizeNotSupported": "Cannot change size for this level."
    }
  },
  "levels": {
    "closeOther": {
      "Button": "Close OTHER BUT \"{level}\"",
      "Confirm": "Are you sure you want to close ALL OTHER levels BUT \"<b>{level}</b>\"?"
    },
    "deleteCurrent": {
      "Button": "Delete <code>\"{level}\"</code>",
      "Confirm": "Are you sure you want to delete the level \"<code>{level}</code>\" from this level set?<br />This will cause all the levels following to shift backward.<br /><b>This action can not be undone.</b>"
    },
    "deleteRest": {
      "Button": "Delete <b>{restCount}</b> rest levels",
      "Confirm": "Are you sure you want to delete all the rest <b>{restCount}</b> levels <b>after</b> current one (that is starting from <code>{nextIndex}</code> inclusive) from this levelset?<br />The levelset then will have only <b>{leftCount}</b> levels.<br /><b>This action can not be undone.</b>"
    },
    "LevelsInFile": "Levels in \"<b>{filename}</b>\"",
    "notActivated": {
      "SelectCompact": "Select a level in <levelsMenu>Levels menu</levelsMenu>.",
      "SelectFull": "Select a level in Dropdown list."
    }
  },
  "levelStats": {
    "DialogTitle": "Tiles stats",
    "sort": {
      "ByCount": "By Count",
      "ByValue": "By Value"
    }
  },
  "levelTest": {
    "buttons": {
      "DemoPlayback": "Play embedded demo with {SO}",
      "GoToSO": "Go to {SO} test",
      "TestLevel": "Test level at {SO}",
      "TestLevelRecordDemo": "Test level at {SO} (+record a demo)"
    },
    "CannotCopyHereCode": "Could not copy. Here is the code:",
    "CopyOptionsAsCode": "Copy code to clipboard to use in level upload request:",
    "LevelUnplayableDueTo": "The level is unplayable due to the following:",
    "NoticeNoDemoSupport": "This file format does not support embedded demos, so a created demo will be silently discarded.",
    "NoticeToSaveDemo": "In order <b>to save demo</b> for this level, please <b>don't test another</b> level until you finish with this one. You will be asked to save new demo.",
    "ToDoWhateverItWillBeSent": "{toDoWhat}, it <b>will be sent to</b> <linkSoTest>{SO} test page</linkSoTest>. It will be opened in new tab/window, so you will not loss undo history in current editing session.",
    "ToReplayDemo": "To replay embedded demo in level",
    "ToTestLevel": "To test a level"
  },
  "selectionEditors": {
    "chess": {
      "FirstTile": "First tile",
      "MinSizeRequire": "at least 2 tiles",
      "SecondTile": "Second tile",
      "Title": "Chess"
    },
    "common": {
      "KeepOld": "keep old"
    },
    "flip": {
      "HTitle": "Flip Horizontal",
      "VTitle": "Flip Vertical"
    },
    "gradient": {
      "FromTile": "From tile",
      "Horizontal": "Horizontal →",
      "Title": "Gradient",
      "ToTile": "To tile",
      "Vertical": "Vertical ↓"
    },
    "maze": {
      "BranchLength": "Branch length",
      "BranchLengthHelp": "It's technical option which could be called \"Difficulty\".<br/>The higher value, the longer \"ways\" could be generated in theory. However, in practice all large values behaves the same after some threshold, because every branch generated just randomly.",
      "HintMazeSizeWillBe": "Maze size is <b>{width}</b>x<b>{height}</b> of \"way\" columns/rows.",
      "HintOuterWallNotIncluded": "<b>NOTICE:</b> The <i>Outer Wall</i> is not included (compared to WpColEd), so the top left cell in the selection is a \"way\" cell. You can first create a \"room\" border of any tiles, and then fill its \"content\" with a maze.",
      "MinSizeRequire": "at least 3x3",
      "Title": "Maze",
      "WallTile": "Wall tile",
      "WayTile": "Way tile"
    },
    "replace": {
      "KeepTileVariants": "Keep tile variants",
      "ReplaceWith": "Replace with",
      "SearchWhat": "Search what",
      "Title": "Replace"
    },
    "rnd": {
      "HintMinCount": "Check above 2 or more tile to use.",
      "Keep": "keep",
      "Probabilities": "Probabilities, relative to each other",
      "Title": "Random",
      "WhichTiles": "Which tiles"
    }
  },
  "settings": {
    "coords": {
      "Label": "Coordinates display",
      "OneBased": "1-based",
      "ZeroBased": "0-based"
    },
    "DialogTitle": "Settings",
    "doubleChip": {
      "Classic": "Classic",
      "Label": "Double Chips",
      "WinPlex": "WinPlex"
    },
    "layout": {
      "Auto": "Auto responsive",
      "Compact": "Force Compact",
      "Full": "Force Full",
      "Label": "Layout"
    }
  },
  "supaplex": {
    "config": {
      "InitialEnv": "Initial conditions",
      "SpecPortsDB": "SpecPorts DB..."
    },
    "convert": {
      "BodySizeExceed": "Level size <b>{width}x{height}</b> don't fit into <b>{maxWidth}x{maxHeight}</b>.",
      "BodySizeWillExtend": "Level size <b>{width}x{height}</b> will be extended to <b>{maxWidth}x{maxHeight}</b>.",
      "DemoWillBeRemoved": "Demo ({n} bytes) will be removed.",
      "MaxLevelsTruncate": "Only {max} levels will be used, and all the rest <b>{rest}</b> will be removed.",
      "MpxSpecPortOffsetExceed": "Impossible to save all the rest levels starting from this one due to MPX file format limitations: <code>offset+1</code> exceeds <code>signed int32</code>. This is because all previous levels together (with demos if any) are too large being written into a MPX file.",
      "OnlyFirstLevelWillLeft": "Only first level will be used, and all the rest <b>{rest}</b> will be removed."
    },
    "demoEditAsText": {
      "help": {
        "B010": "Every keystroke from binary demo converted to text representation. Keystrokes can be separated with any space characters.",
        "B020": "Every keystroke has form:<br /><code>KEY</code> optionally followed by <i>duration</i>.",
        "B030": "where <code>KEY</code> can be one of the following (can be lowercase too):",
        "C010": "The <i>duration</i> can be:",
        "D010": "<i>omitted</i> ⇒ 1 frame",
        "D020": "<code><b>INTEGER</b></code> ⇒ the given number of frames",
        "D030": "<code><b>INTEGER.</b></code> ⇒ the given number of \"tiles\", where 1 \"tile\" is 8 frames",
        "D040": "<code><b>INTEGER.INTEGER</b></code> ⇒ combination of both above, so <code>2.3</code> is 2*8+3, t.i. <code>19</code>",
        "E010": "Example:",
        "E020": "This mean:",
        "F010": "nothing pressed <code>7</code> frames",
        "F020": "<kbd>Right</kbd> pressed <code>42</code> frames",
        "F030": "<kbd>Up</kbd> pressed <code>2</code> tiles and <code>3</code> frames, which is 2*8+3 = <code>19</code> frames",
        "F040": "nothing pressed <code>1</code> frame",
        "F050": "<kbd>Left</kbd> pressed <code>3</code> tiles, which is 3*8 = <code>24</code> frames",
        "F060": "<kbd>Down</kbd> pressed <code>5</code> frames",
        "F070": "<kbd>Left</kbd> pressed <code>1</code> frame",
        "NoKeyPressed": "no key pressed"
      },
      "UseTiles": "Use \"tiles\" duration",
      "UseTilesHelp": "When enabled, <code>42</code> frames becomes 5 tiles + 2 frames and writes as <code>5.2</code><br /><code>40</code> frames becomes exactly 5 tiles as <code>5.</code><br /><code>2</code> frames kept as <code>2</code>"
    },
    "features": {
      "FreezeEnemies": "Freeze Enemies",
      "FreezeZonks": "Freeze Zonks",
      "Gravity": "Gravity",
      "InfotronsNeed": "Infotrons Need",
      "SpecialPorts": "Special Ports",
      "SpecPortInList": "Spec Port #{n}",
      "UnusedByte": "Unused Byte",
      "UseInfotronsNeed": "Custom Infotrons Needed",
      "UsePlasma": "Use Plasma",
      "UsePlasmaLimit": "Plasma Limit",
      "UsePlasmaTime": "Plasma Time",
      "UseSerialPorts": "Use Serial Ports",
      "UseZonker": "Use Zonker"
    },
    "infotronsNeed": {
      "Actual": "= {n}",
      "All": "= all {n}",
      "Mod256": "Actual number of Infotrons is {total},\nbut SP counts it in a single byte,\nso the result is a module of 256:\n{total} & 0xFF = {total} % 256 = {mod}",
      "OfTotal": "of {n}"
    },
    "initial": {
      "FreezeEnemies": "FE",
      "FreezeZonks": "FZ",
      "Gravity": "Gr",
      "None": "default"
    },
    "localOptions": {
      "PlasmaLimitLabel": "Growth limit",
      "PlasmaLimitUnits": "tiles",
      "PlasmaTimeLabel": "Fast growth phase starts after",
      "PlasmaTimeUnits": "frames",
      "UseInfotronsNeed": "Override <tile/> Needed",
      "UseInfotronsNeedHint": "(can be more then <code>255</code> or exactly <code>0</code>)",
      "UsePlasma": "Replace <tile/> with Plasma",
      "UseSerialPorts": "Allow serial ports",
      "UseZonker": "Replace <tile/> 2x2 with Zonker"
    },
    "specport": {
      "DialogTitle": "Port properties",
      "DontChange": "don't change",
      "Enemies": "Enemies",
      "freezeEnemies": {
        "Off": "Unfreeze",
        "On": "Freeze"
      },
      "freezeZonks": {
        "Off": "Unfreeze",
        "On": "Freeze"
      },
      "gravity": {
        "Off": "OFF",
        "On": "ON"
      },
      "Gravity": "Gravity",
      "IsRegular": "Regular Port",
      "IsSpecial": "Special Port",
      "NoticeSpecialWithoutProps": "<i><b>NOTICE:</b> This Special Port has no properties in level, and so it behaves as Regular Port. It will be fixed when you complete by [OK].</i>",
      "PreStatement": "When Murphy pass thru this Special Port, the game conditions will change as following:",
      "Toggle": "Toggle",
      "Zonks": "Zonks"
    },
    "specportsDB": {
      "DialogIntro": "All special ports in the level. Drag to sort.",
      "DialogTitle": "Special Ports Database"
    },
    "tiles": {
      "Base": "Base",
      "Bug": "Bug",
      "Chip": "Chip",
      "ChipBottom": "Chip Bottom",
      "ChipLeft": "Chip Left",
      "ChipRight": "Chip Right",
      "ChipTop": "Chip Top",
      "DiskOrange": "Orange Disk",
      "DiskRed": "Red Disk",
      "DiskYellow": "Yellow Disk",
      "Electron": "Electron",
      "Empty": "Space",
      "Exit": "Exit",
      "Hardware": "Hardware",
      "Hardware28": "Hardware Circular",
      "Hardware33": "Hardware Resistor",
      "Hardware35": "Hardware Resistors various",
      "Hardware36": "Hardware Resistors vertical",
      "Hardware37": "Hardware Resistors horizontal",
      "HardwareCapacitor": "Hardware Capacitor",
      "HardwareLampBlue": "Hardware Lamp Blue",
      "HardwareLampGreen": "Hardware Lamp Green",
      "HardwareLampRed": "Hardware Lamp Red",
      "HardwareStripes": "Hardware Stripes",
      "Infotron": "Infotron",
      "Invisible": "Invisible Wall",
      "Murphy": "Murphy",
      "PortDown": "Port Down",
      "PortH": "Port Horizontal",
      "PortLeft": "Port Left",
      "PortRight": "Port Right",
      "PortUp": "Port Up",
      "PortV": "Port Vertical",
      "PortX": "Port Cross",
      "SnikSnak": "Snik-Snak",
      "SpecPort": "Special {port}",
      "Terminal": "Terminal",
      "Zonk": "Zonk"
    },
    "tilesMeta": {
      "Port": "Regular/Special {port}\nRight Click on it in level body to see properties"
    }
  },
  "validate": {
    "InvalidValue": "Invalid value: {error}",
    "StrMaxLen": "Up to {max} characters"
  }
}
